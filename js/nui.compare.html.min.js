/**
 * NUI HTML Compare Tool v1.1
 * Copyright 2018 NUI HTML Compare Tool Author[Pushpdeep].
 *
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var NUI = { CompareTool: function (arguments) { this.NUI_ADDED_CSS = "added", this.NUI_DELETED_CSS = "deleted"; var t = this, e = function (e, n) { e.addClass(t.options.addedCss).appendTo(n) }, n = function (e, n) { e.addClass(t.options.deletedCss).appendTo(n) }, s = function (t) { return "<" + t + "></" + t + ">" }, i = function (t, o, l, d) { for (var p = t.length > o.length ? t.length : o.length, r = 0; r < p; r++) { if (t[r] && o[r] && $(t[r])[0].tagName && $(o[r])[0].tagName && $(t[r])[0].tagName === $(o[r])[0].tagName) d = d ? $(s($(t[r])[0].tagName)).appendTo(d) : $(s($(t[r])[0].tagName)).appendTo(l), i($.parseHTML($(t[r]).html()), $.parseHTML($(o[r]).html()), d, d); else if (t[r] && o[r] && $(t[r])[0].tagName && $(o[r])[0].tagName && $(t[r])[0].tagName !== $(o[r])[0].tagName) d ? (n($(t[r]), d), e($(o[r]), d)) : (n($(t[r]), l), e($(o[r]), l)); else if (void 0 === o[r]) n($(t[r]), d || l); else { if (void 0 !== t[r]) { d ? d.append(a(t[r], o[r])) : l.append(a(t[r], o[r])); continue } e($(o[r]), d || l) } d = void 0 } }, a = function (t, e) { var n = void 0 === t ? "" : t.data, s = void 0 === e ? "" : e.data, i = ""; return void 0 !== n && 0 === n.trim().length && void 0 !== s && 0 === s.trim().length ? t : (n = n.trim().replace(/\s/g, "&nbsp;"), 0 !== (s = s.trim().replace(/\s/g, "&nbsp;")).trim().length || 0 !== n.trim().length ? i = o(n.split("&nbsp;"), s.split("&nbsp;")) : 0 === s.trim().length && (i = i + '<span class="deleted">' + n + "</span>"), i) }, o = function (t, e) { for (var n = "", s = "", i = "", a = "", o = 0, r = 0, h = "", u = ""; void 0 !== t[o] || void 0 !== e[r];)if (u = l(t, o), h = d(e, r), t[o] && e[r] && t[o].trim() === e[r].trim()) a = p(a, n, s, i, !0, !0, !1), i += u, n = "", s = "", o++ , r++; else if (void 0 !== e[r]) if (void 0 !== t[o]) { if (void 0 !== t[o] && void 0 !== e[r] && t[o] !== e[r]) { a = p(a, n, s, i, !1, !1, !0), i = ""; for (; void 0 !== t[o];)if (0 !== t[o].length) { var m = e.indexOf(t[o]); if (m > r) { for (var g = r; g < m; g++)n += h, h = d(e, r); r = m; break } if (t[o] === e[r]) break; s += u, u = l(t, ++o) } else s += u, u = l(t, ++o); o-- , r-- } o++ , r++ } else a = p(a, n, s, i, !1, !0, !0), n += h, s = "", i = "", o++ , r++; else a = p(a, n, s, i, !0, !1, !0), s += u, n = "", i = "", o++ , r++; return a = p(a, n, s, i, !0, !0, !0), n = "", s = "", i = "", a }, l = function (t, e) { return e === t.length - 1 ? "" === t[e] ? "&nbsp;" : void 0 === t[e] ? void 0 : t[e] : "" === t[e] ? "&nbsp;" : void 0 === t[e] ? void 0 : t[e] + "&nbsp;" }, d = function (t, e) { return t.length, "" === t[e] ? "&nbsp;" : void 0 === t[e] ? void 0 : t[e] + "&nbsp;" }, p = function (t, e, n, s, i, a, o) { return a && n.length > 0 && (t = t + '<span class="deleted">' + n + "</span>"), i && e.length > 0 && (t = t + '<span class="added">' + e + "</span>"), o && s.length > 0 && (t = t + '<span class="nochange">' + s + "</span>"), t }; arguments && "object" == typeof arguments && (this.options = function (e, n) { var s; for (s in n) n.hasOwnProperty(s) && (e[s] = n[s]); return null === e.addedCss && (e.addedCss = t.NUI_ADDED_CSS), null === e.deletedCss && (e.deletedCss = t.NUI_DELETED_CSS), e }({ oldHtml: null, newHtml: null, target: null, addedCss: null, deletedCss: null }, arguments)), this.options.outputHtml = null, this.options.defaulTarget = '<div class="compare-html-tag" style="display:none;"></div>', this.clear = function () { this.options.target && $(this.options.target).empty() }, this.compare = function () { var t = null; return this.options.target ? ((t = $(this.options.target)).addClass("compare-html-tag"), this.clear()) : (t = $(this.options.defaulTarget).appendTo(document.body)).empty(), i($.parseHTML(this.options.oldHtml, !1), $.parseHTML(this.options.newHtml, !1), t, null), this.options.outputHtml = $(t).html(), this.options.target || $(t).remove(), this.options.outputHtml } } };